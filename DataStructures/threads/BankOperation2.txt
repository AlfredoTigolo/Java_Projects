package thread2;
import java.util.Random;

public class BankOperation2 {
  public static void main(String[] args) {
    int[] initialBalance = {500, 1000};
    int[] totalCredits = new int[initialBalance.length];
    int[] totalDebits = new int[initialBalance.length];
    int transactionCount = 20;  //numbers of debits and credits
//Create the account, bank and the clerk
  Bank theBank = new Bank();
  Clerk clerk1 = new Clerk(theBank);
  Clerk clerk2 = new Clerk(theBank);
  Account[] accounts = new Account[initialBalance.length];
  for(int i =0; i < initialBalance.length; i++){
    accounts[i] = new Account(i + 1, initialBalance[i]);
    totalCredits[i] = 0;
    totalDebits[i] = 0;
  }//end of FOR{}
//Create the threads for the clerks as daemon, and start them off
  Thread clerk1Thread = new Thread(clerk1);
  Thread clerk2Thread = new Thread(clerk2);
  clerk1Thread.setDaemon(true);
  clerk2Thread.setDaemon(true);
    clerk1Thread.start();
    clerk2Thread.start();
//Generate transactions of each type and pass to the clerk
  Random rand = new Random();
  Transaction transaction;
  int amount;
  int count;
  for(int i = 1; i <= transactionCount; i++){
    count = rand.nextInt(accounts.length);
    amount = 50 + rand.nextInt(26); //Generate amount of $50-$75
    transaction = new Transaction(accounts[count], Transaction.CREDIT, amount);
    totalCredits[count] += amount;  //keep total credits tally
//Wait until the first clerk is free.
  while(clerk1.isBusy())
    try{ Thread.sleep(25);}  //busy so try it later.
    catch(InterruptedException e){ System.out.println(e);}
    clerk1.doTransaction(transaction);

    count = rand.nextInt(accounts.length);
    amount = 30 + rand.nextInt(31);//generate amount of $30 to $60
    transaction = new Transaction(accounts[count], Transaction.DEBIT, amount);
    totalDebits[count] += amount;  //keep total debits tally
//Wait unitl the second clerk is free
  while(clerk2.isBusy())
    try{ Thread.sleep(25);}
    catch(InterruptedException e){ System.out.println(e);}
    clerk2.doTransaction(transaction);
  }//end of FOR{}
//Wait until both clerks are done
  while(clerk1.isBusy())
    try{  Thread.sleep(25);}
    catch(InterruptedException e){ System.out.println(e);}
//Now output the result
  for(int i = 0; i < accounts.length; i++){
    System.out.println(
        "Original balance   : $" + initialBalance[i] + "\n" +
        "Total credits      : $" + totalCredits[i] + "\n" +
        "TotalDebits        : $" + totalDebits[i] + "\n" +
        "Final balance      : $" + accounts[i].getBalance() + "\n" +
        "should be          : $" + (initialBalance[i] + totalCredits[i] - totalDebits[i] + "\n"));
  }//end of FOR{}
  }//end of main()
}//end of calss BankOperation{}